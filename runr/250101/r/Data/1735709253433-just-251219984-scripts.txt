# Saved at 1/1/2025 13:27:32 pm<span title="1/1/2025 13:27:32 pm">Practice lang </span>
# Install required libraries
if (!require("car")) install.packages("car", dependencies = TRUE)
if (!require("MASS")) install.packages("MASS", dependencies = TRUE)

# Load libraries
library(car)
library(MASS)

# Load the dataset
# Replace "your_dataset.csv" with the path to your dataset
# Example dataset provided: mtcars
data <- mtcars

# Brief summary of the dataset
print("Dataset Summary:")
summary(data)
str(data)

# Full Model: Use all predictors
# Replace 'mpg' with your dependent variable and others with independent variables
full_model <- lm(mpg ~ ., data = data)
print("Summary of Full Model:")
summary(full_model)

# Reduced Model: Select significant variables based on the full model
# Adjust this based on the significant variables from the summary of the full model
reduced_model <- lm(mpg ~ wt + qsec + am, data = data)
print("Summary of Reduced Model:")
summary(reduced_model)

# Check Assumptions for the Reduced Model

# 1. Linearity
print("Checking Linearity:")
plot(reduced_model$fitted.values, residuals(reduced_model),
     main = "Residuals vs Fitted",
     xlab = "Fitted Values",
     ylab = "Residuals")
abline(h = 0, col = "red")

# 2. Normality of Residuals
print("Checking Normality of Residuals:")
qqnorm(residuals(reduced_model), main = "Q-Q Plot")
qqline(residuals(reduced_model), col = "red")
shapiro_test <- shapiro.test(residuals(reduced_model))
print(shapiro_test)

# 3. Homoscedasticity
print("Checking Homoscedasticity:")
ncv_test <- ncvTest(reduced_model) # Breusch-Pagan test
print(ncv_test)

# 4. Multicollinearity
print("Checking Multicollinearity:")
vif_values <- vif(reduced_model)
print(vif_values)

# 5. Independence of Residuals
print("Checking Independence of Residuals:")
dw_test <- durbinWatsonTest(reduced_model)
print(dw_test)

# Remedial Measures if Assumptions are Violated
print("Applying Box-Cox Transformation if necessary:")
boxcox_output <- boxcox(reduced_model, lambda = seq(-2, 2, 0.1), main = "Box-Cox Transformation")
best_lambda <- boxcox_output$x[which.max(boxcox_output$y)]
print(paste("Best Lambda: ", best_lambda))